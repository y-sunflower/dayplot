{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"dayplot","text":"<p>A simple-to-use Python library to build calendar heatmaps with ease. It's built on top of matplotlib and leverages it to access high customization possibilities.</p>"},{"location":"#examples","title":"Examples","text":"Quick startColormapFill the gapDark themeRound boxesGithub style <pre><code>import matplotlib.pyplot as plt\nimport dayplot as dp\n\ndf = dp.load_dataset(\"pandas\") # can also be \"polars\", \"pyarrow\", etc\n\nfig, ax = plt.subplots(figsize=(15, 6))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    ax=ax,\n)\n</code></pre> <pre><code>import matplotlib.pyplot as plt\nimport dayplot as dp\n\ndf = dp.load_dataset(\"pandas\")\n\nfig, ax = plt.subplots(figsize=(15, 6))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    cmap=\"Reds\", # any matplotlib colormap\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    ax=ax,\n)\n</code></pre> <pre><code>import matplotlib.pyplot as plt\nimport dayplot as dp\n\ndf = dp.load_dataset(\"pandas\")\n\nfig, ax = plt.subplots(figsize=(16, 4))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    mutation_scale=1.22,\n    ax=ax,\n)\n</code></pre> <pre><code>import matplotlib.pyplot as plt\nimport dayplot as dp\n\ndf = dp.load_dataset(\"pandas\")\n\nfig, ax = plt.subplots(figsize=(15, 6))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    color_for_none=\"#bcbcbc\",\n    edgecolor=\"white\",\n    edgewidth=0.4,\n    cmap=\"OrRd\",\n    day_kws={\"color\": \"white\"},\n    month_kws={\"color\": \"white\"},\n    ax=ax,\n)\nfig.set_facecolor(\"#2a2929\")\nax.set_facecolor(\"#2a2929\")\n</code></pre> <pre><code>import matplotlib.pyplot as plt\nimport dayplot as dp\n\ndf = dp.load_dataset(\"pandas\")\n\nfig, ax = plt.subplots(figsize=(16, 4))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    boxstyle=\"circle\",\n    ax=ax,\n)\n</code></pre> <pre><code>import matplotlib.pyplot as plt\nimport dayplot as dp\n\ndf = dp.load_dataset(\"pandas\")\n\nfig, ax = plt.subplots(figsize=(16, 4))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    ax=ax,\n    **dp.styles[\"github\"]\n)\nfig.set_facecolor(\"#0d1117\")\nax.set_facecolor(\"#0d1117\")\n</code></pre> <p>See more examples</p>"},{"location":"#installation","title":"Installation","text":"stabledev <pre><code>pip install dayplot\n</code></pre> <pre><code>pip install git+https://github.com/y-sunflower/dayplot.git@main\n</code></pre>"},{"location":"#related-projects","title":"Related projects","text":"<ul> <li>calplot</li> <li>july</li> <li>calendarplot</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>This package is relatively new and still needs some improvements and bug fixes. There are several ways you can contribute:</p> <ul> <li>Opening GitHub issues to list the bugs you've found</li> <li>Implementation of new features or resolution of existing bugs</li> <li>Enhancing the documentation by creating cool examples</li> </ul>"},{"location":"contributing/#setting-up-your-environment","title":"Setting up your environment","text":"<ul> <li> <p>Fork the repository to your own GitHub account.</p> </li> <li> <p>Clone your forked repository to your local machine (ensure you have Git installed):</p> </li> </ul> <pre><code>git clone https://github.com/YOURUSERNAME/dayplot.git\ncd dayplot\n</code></pre> <ul> <li>Create a new branch for your theme:</li> </ul> <pre><code>git checkout -b my-feature\n</code></pre> <ul> <li>Set up your Python environment (ensure you have uv installed):</li> </ul> <pre><code>uv sync --all-extras --dev\nuv pip install -e .\nuv run pre-commit install\n</code></pre>"},{"location":"contributing/#code","title":"Code!","text":"<p>You can now make changes to the package and start coding!</p>"},{"location":"contributing/#run-the-test","title":"Run the test","text":"<ul> <li>Test that everything works correctly by running:</li> </ul> <pre><code>make test\n</code></pre>"},{"location":"contributing/#preview-documentation-locally","title":"Preview documentation locally","text":"<pre><code>make preview\n</code></pre>"},{"location":"contributing/#push-changes","title":"Push changes","text":"<ul> <li>Commit and push your changes:</li> </ul> <pre><code>git add -A\ngit commit -m \"description of what you did\"\ngit push\n</code></pre> <ul> <li>Go back to your fork and click on the \"Open a PR\" popup</li> </ul> <p>Congrats! Once your PR is merged, it will be part of <code>dayplot</code>.</p> <p></p>"},{"location":"reference/calendar/","title":"Calendar heatmaps","text":""},{"location":"reference/calendar/#dayplot.calendar","title":"<code>dayplot.calendar</code>","text":""},{"location":"reference/calendar/#dayplot.calendar.calendar","title":"<code>calendar(dates, values, start_date=None, end_date=None, color_for_none=None, edgecolor='black', edgewidth=0.0, cmap='Greens', week_starts_on='Sunday', month_kws=None, day_kws=None, day_x_margin=0.02, month_y_margin=0.4, vmin=None, vmax=None, vcenter=None, boxstyle='square', legend=False, legend_bins=4, legend_labels=None, legend_labels_precision=None, legend_labels_kws=None, clip_on=False, ax=None, **kwargs)</code>","text":"<p>Create a calendar heatmap (GitHub-style) from input dates and values, supporting both positive and negative values via a suitable colormap scale.</p> <p>This function generates a calendar heatmap similar to GitHub's contribution graph, where each cell represents a day colored according to the corresponding value. The chart is organized by weeks (columns) and days of the week (rows), starting from a specified start date to an end date.</p> <p>When <code>vmin</code>, <code>vmax</code>, and <code>vcenter</code> are not specified, they default to the data's minimum, maximum, and zero (if data spans negative and positive values), respectively. Providing any of <code>vmin</code>, <code>vmax</code>, or <code>vcenter</code> manually will override the automatic calculation for that parameter.</p> <p>Parameters:</p> Name Type Description Default <code>dates</code> <code>List[Union[date, datetime, str]]</code> <p>A list of date-like objects (e.g., datetime.date, datetime.datetime, or strings in \"YYYY-MM-DD\" format). Must have the same length as values.</p> required <code>values</code> <code>List[Union[int, float]]</code> <p>A list of numeric values corresponding to each date in dates. These values represent contributions or counts for each day and must have the same length as dates.</p> required <code>start_date</code> <code>Optional[Union[date, datetime, str]]</code> <p>The earliest date to display on the chart. Can be a date, datetime, or a string in \"YYYY-MM-DD\" format. If not provided, the minimum date found in <code>dates</code> will be used.</p> <code>None</code> <code>end_date</code> <code>Optional[Union[date, datetime, str]]</code> <p>The latest date to display on the chart. Can be a date, datetime, or a string in \"YYYY-MM-DD\" format. If not provided, the maximum date found in <code>dates</code> will be used.</p> <code>None</code> <code>color_for_none</code> <code>Optional[str]</code> <p>Color to use for days with no contributions (i.e., count zero). Defaults to \"#e8e8e8\", a light gray color. This parameter is ignored when <code>values</code> has negative values.</p> <code>None</code> <code>edgecolor</code> <code>str</code> <p>Color of the edges for each day's rectangle.</p> <code>'black'</code> <code>edgewidth</code> <code>float</code> <p>Line width for the edges of each day's rectangle.</p> <code>0.0</code> <code>cmap</code> <code>Union[str, LinearSegmentedColormap]</code> <p>A valid Matplotlib colormap name or a LinearSegmentedColormap instance. The</p> <code>'Greens'</code> <code>week_starts_on</code> <code>str</code> <p>The starting day of the week, which can be specified as a string (\"Sunday\", \"Monday\", ..., \"Saturday\").</p> <code>'Sunday'</code> <code>month_kws</code> <code>Optional[Dict]</code> <p>Additional keyword arguments passed to the matplotlib.axes.Axes.text function when labeling month names (outside of x, y and s).</p> <code>None</code> <code>day_kws</code> <code>Optional[Dict]</code> <p>Additional keyword arguments passed to the matplotlib.axes.Axes.text function when labeling weekday names on the y-axis (outside of x, y and s).</p> <code>None</code> <code>day_x_margin</code> <code>float</code> <p>Distance between the day labels (Monday, Tuesday, etc.) and the graph. The greater the distance, the further to the left the text will be.</p> <code>0.02</code> <code>month_y_margin</code> <code>float</code> <p>Distance between the month labels (January, February, etc.) and the graph. The greater the distance, the more text will appear at the top.</p> <code>0.4</code> <code>vmin</code> <code>Optional[float]</code> <p>The lower bound for the color scale. If None, it is determined automatically from the data. If data contains both positive and negative values and <code>vcenter</code> is not provided, <code>vmin</code> will default to the data's minimum. Providing <code>vmin</code> overrides the automatic calculation.</p> <code>None</code> <code>vmax</code> <code>Optional[float]</code> <p>The upper bound for the color scale. If None, it is determined automatically from the data. If data contains both positive and negative values and <code>vcenter</code> is not provided, <code>vmax</code> will default to the data's maximum. Providing <code>vmax</code> overrides the automatic calculation.</p> <code>None</code> <code>vcenter</code> <code>Optional[float]</code> <p>The midpoint for the color scale, typically used with diverging colormaps (e.g., \"RdBu\") to position a central reference (e.g., zero). If None and the data spans negative and positive values, <code>vcenter</code> will default to 0. Providing vcenter overrides this automatic setting.</p> <code>None</code> <code>boxstyle</code> <code>Union[str, BoxStyle]</code> <p>The style of each box. This will be passed to <code>matplotlib.patches.FancyBboxPatch</code>. Available values are: \"square\", \"circle\", \"ellipse\", \"larrow\"</p> <code>'square'</code> <code>legend</code> <code>bool</code> <p>Whether to display a legend for the color scale.</p> <code>False</code> <code>legend_bins</code> <code>int</code> <p>Number of boxes/steps to display in the legend.</p> <code>4</code> <code>legend_labels</code> <code>Optional[Union[List, Literal['auto']]]</code> <p>Labels for the legend boxes. Can be a list of strings or \"auto\" to generate labels from the data values.</p> <code>None</code> <code>legend_labels_precision</code> <code>Optional[int]</code> <p>Number of decimal places to round legend labels when <code>legend_labels=\"auto\"</code>.</p> <code>None</code> <code>legend_labels_kws</code> <code>Optional[Dict]</code> <p>Additional keyword arguments passed to the matplotlib text function when rendering legend labels.</p> <code>None</code> <code>clip_on</code> <code>bool</code> <p>Whether the artist (e.g., squares) is clipped to the axes boundaries (True) or allowed to extend beyond them (False).</p> <code>False</code> <code>ax</code> <code>Optional[Axes]</code> <p>A matplotlib axes. If None, plt.gca() will be used. It is advisable to make this explicit to avoid unexpected behaviour, particularly when manipulating a figure with several axes.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Any additional arguments that will be passed to <code>matplotlib.patches.FancyBboxPatch</code>. For example, you can set <code>alpha</code>, <code>hatch</code>, <code>linestyle</code>, etc. You can find them all here.</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Rectangle]</code> <p>A list of <code>matplotlib.patches.FancyBboxPatch</code> (one for each cell).</p> Notes <p>The function aggregates multiple entries for the same date by summing their values.</p>"},{"location":"reference/calendar/#examples","title":"Examples","text":""},{"location":"reference/calendar/#basic-usage","title":"Basic usage","text":"<pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\n\ndf = dp.load_dataset()\n\nfig, ax = plt.subplots(figsize=(15, 5))\ndp.calendar(\n   df[\"dates\"],\n   df[\"values\"],\n   start_date=\"2024-01-01\",\n   end_date=\"2024-12-31\"\n)\n</code></pre>"},{"location":"reference/calendar/#change-colormap","title":"Change colormap","text":"<pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\n\ndf = dp.load_dataset()\n\nfig, ax = plt.subplots(figsize=(15, 5))\ndp.calendar(\n   df[\"dates\"],\n   df[\"values\"],\n   cmap=\"Reds\",\n   start_date=\"2024-01-01\",\n   end_date=\"2024-12-31\"\n)\n</code></pre>"},{"location":"reference/calendar/#change-other-colors","title":"Change other colors","text":"<pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\n\ndf = dp.load_dataset()\n\nfig, ax = plt.subplots(figsize=(15, 5))\ndp.calendar(\n   df[\"dates\"],\n   df[\"values\"],\n   start_date=\"2024-01-01\",\n   end_date=\"2024-12-31\",\n   color_for_none=\"pink\",\n   edgecolor=\"white\",\n   edgewidth=0.4,\n   day_kws={\"color\": \"skyblue\"},\n   month_kws={\"color\": \"red\"},\n   ax=ax,\n)\nfig.set_facecolor(\"black\")\nax.set_facecolor(\"black\")\n</code></pre>"},{"location":"reference/calendar/#boxstyle","title":"Boxstyle","text":"<pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\n\ndf = dp.load_dataset()\n\nfig, ax = plt.subplots(figsize=(15, 5))\ndp.calendar(\n   dates=df[\"dates\"],\n   values=df[\"values\"],\n   start_date=\"2024-01-01\",\n   end_date=\"2024-12-31\",\n   boxstyle=\"circle\",\n   ax=ax,\n)\n</code></pre>"},{"location":"reference/calendar/#fill-the-gap","title":"Fill the gap","text":"<pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\n\ndf = dp.load_dataset()\n\nfig, ax = plt.subplots(figsize=(15, 5))\ndp.calendar(\n   dates=df[\"dates\"],\n   values=df[\"values\"],\n   start_date=\"2024-01-01\",\n   end_date=\"2024-12-31\",\n   mutation_scale=1.22, # 22% bigger boxes\n   ax=ax,\n)\n</code></pre>"},{"location":"reference/calendar/#label-style","title":"Label style","text":"<pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\n\ndf = dp.load_dataset()\n\nfig, ax = plt.subplots(figsize=(15, 5))\ndp.calendar(\n   dates=df[\"dates\"],\n   values=df[\"values\"],\n   start_date=\"2024-01-01\",\n   end_date=\"2024-12-31\",\n   day_kws={\"weight\": \"bold\", \"size\": 12},\n   month_kws={\"size\": 20, \"color\": \"red\"},\n   day_x_margin=0.05,  # default = 0.02\n   month_y_margin=0.8,  # default = 0.4\n   ax=ax,\n)\n</code></pre>"},{"location":"reference/calendar/#combine-calendars","title":"Combine calendars","text":"<pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\n\ndf = dp.load_dataset()\n\nfig, (ax1, ax2) = plt.subplots(\n   nrows=2,\n   figsize=(16, 4)\n)\n\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    start_date=\"2025-01-01\",\n    end_date=\"2025-12-31\",\n    ax=ax1, # top axes\n)\n\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    ax=ax2, # bottom axes\n)\n\ntext_args = dict(x=-4, y=3.5, size=30, rotation=90, color=\"#aaa\", va=\"center\")\nax1.text(s=\"2024\", **text_args)\nax2.text(s=\"2025\", **text_args)\n</code></pre>"},{"location":"reference/calendar/#advanced","title":"Advanced","text":"<p>See advanced usage here.</p>"},{"location":"reference/fetch_github_contrib/","title":"Fetch Github contributions","text":"<p><code>dayplot</code> provides a simple function to fetch Github contributions data from a given Github username.</p> <p></p>"},{"location":"reference/fetch_github_contrib/#dayplot.fetch_github_contrib","title":"<code>dayplot.fetch_github_contrib(username, github_token, start_date, end_date, backend='pandas')</code>","text":"<p>Fetches GitHub contributions for a given user and date range. It requires <code>requests</code> and <code>pandas</code> to be installed.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>GitHub username.</p> required <code>github_token</code> <code>str</code> <p>Personal access token for GitHub API. Find yours here.</p> required <code>start_date</code> <code>str</code> <p>Start date in ISO 8601 format (e.g. \"2024-01-01T00:00:00Z\").</p> required <code>end_date</code> <code>str</code> <p>End date in ISO 8601 format (e.g. \"2024-12-31T23:59:59Z\").</p> required <code>backend</code> <code>str</code> <p>The output format of the dataframe. Note that, for example, if you set <code>backend=\"polars\"</code>, you must have polars installed. Must be one of the following: \"pandas\", \"polars\", \"pyarrow\", \"modin\", \"cudf\". Default to \"pandas\".</p> <code>'pandas'</code> <p>Returns:</p> Type Description <p>A DataFrame with dates and contribution counts.</p>"},{"location":"reference/fetch_github_contrib/#examples","title":"Examples","text":"<pre><code>import dayplot as dp\nfrom dotenv import load_dotenv\nimport os\n\n# generate a token: https://github.com/settings/tokens\nload_dotenv()\ntoken = os.getenv(\"GITHUB_TOKEN\")\n\nstart_date_iso = \"2024-01-01T00:00:00Z\"\nend_date_iso = \"2024-12-31T23:59:59Z\"\n\nmy_data = fetch_github_contrib(\n   username=\"y-sunflower\",\n   github_token=token,\n   start_date=start_date_iso,\n   end_date=end_date_iso,\n   backend=\"pandas\"\n)\n\nmy_data.head() # it's a pandas dataframe\n</code></pre>"},{"location":"reference/load_dataset/","title":"Load dataset","text":"<p><code>dayplot</code> provides a minimalist dataset with daily data, primarily for use in documentation.</p> <p></p>"},{"location":"reference/load_dataset/#dayplot.load_dataset","title":"<code>dayplot.load_dataset(backend='pandas', **kwargs)</code>","text":"<p>Load a simple dataset with fake daily data. This function is a simple wrapper around the <code>narwhals.read_csv()</code> function.</p> <p>Parameters:</p> Name Type Description Default <code>backend</code> <code>str</code> <p>The output format of the dataframe. Note that, for example, if you set <code>backend=\"polars\"</code>, you must have polars installed. Must be one of the following: \"pandas\", \"polars\", \"pyarrow\", \"modin\", \"cudf\". Default to \"pandas\".</p> <code>'pandas'</code> <code>kwargs</code> <p>Additional arguments passed to <code>narwhals.read_csv()</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>IntoDataFrame</code> <p>A dataframe with the specified dataset.</p>"},{"location":"tuto/advanced/","title":"Advanced examples","text":"<p>Here's a list of cool uses for <code>dayplot</code> to demonstrate its capabilities. It regularly uses external libraries such as pyfonts or pypalettes.</p>"},{"location":"tuto/advanced/#average-temperature-in-tunis","title":"Average temperature in Tunis","text":"<p>The dataset can be found here.</p> <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\nfrom pypalettes import load_cmap\nfrom pyfonts import load_font\nimport dayplot as dp\n\ndf = pd.read_csv(\"datasets/city_temperature.csv\", low_memory=False)\ndf = df[df[\"City\"] == \"Tunis\"]\ndf = df[df[\"Year\"].isin([2017, 2018, 2019])]\ndf[\"Date\"] = pd.to_datetime(df[[\"Year\", \"Month\", \"Day\"]])\ndf = df[df[\"AvgTemperature\"] != -99.0]\n\ncmap = load_cmap(\"jazz_city\", cmap_type=\"continuous\", reverse=True)\nfont_url = \"https://github.com/coreyhu/Urbanist/blob/main/fonts/ttf\"\nfontlight = load_font(f\"{font_url}/Urbanist-Light.ttf?raw=true\")\nfontmedium = load_font(f\"{font_url}/Urbanist-Medium.ttf?raw=true\")\n\nstyle_args = dict(\n    cmap=cmap,\n    day_kws={\"font\": fontlight},\n    month_kws={\"font\": fontlight},\n    day_x_margin=0.03,\n    month_y_margin=0.5,\n)\n\nfig, axs = plt.subplots(nrows=3, figsize=(15, 5))\ndp.calendar(\n    df[\"Date\"],\n    df[\"AvgTemperature\"],\n    start_date=\"2019-01-01\",\n    end_date=\"2019-12-31\",\n    ax=axs[0],\n    **style_args,\n)\ndp.calendar(\n    df[\"Date\"],\n    df[\"AvgTemperature\"],\n    start_date=\"2018-01-01\",\n    end_date=\"2018-12-31\",\n    ax=axs[1],\n    **style_args,\n)\ndp.calendar(\n    df[\"Date\"],\n    df[\"AvgTemperature\"],\n    start_date=\"2017-01-01\",\n    end_date=\"2017-12-31\",\n    ax=axs[2],\n    **style_args,\n)\nfig.text(\n    x=0.5,\n    y=0.94,\n    s=\"Average temperature in Tunis, Tunisia\",\n    size=20,\n    ha=\"center\",\n    font=fontmedium,\n)\nfig.text(\n    x=0.75,\n    y=0.08,\n    s=\"made with dayplot\",\n    size=7,\n    ha=\"right\",\n    font=fontmedium,\n)\ntext_args = dict(\n    x=-6, y=3.5, size=30, rotation=90, color=\"#aaa\", va=\"center\", font=fontlight\n)\naxs[0].text(s=\"2019\", **text_args)\naxs[1].text(s=\"2018\", **text_args)\naxs[2].text(s=\"2017\", **text_args)\n</code></pre> <p></p>"},{"location":"tuto/advanced/#elon-musk-tweets","title":"Elon Musk Tweets","text":"<p>The dataset can be found here and the image of Musk here.</p> <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom PIL import Image\nfrom pypalettes import load_cmap\nfrom pyfonts import load_font\nimport dayplot as dp\n\ndf = pd.read_csv(\"datasets/elonmusk.csv\")\ndf[\"Datetime\"] = pd.to_datetime(df[\"Datetime\"])\ndf[\"Date\"] = df[\"Datetime\"].dt.strftime(\"%Y-%m-%d\")\ndf = df.groupby(\"Date\").size().reset_index(name=\"n_tweets\")\ndf = df[df[\"Date\"] &lt;= \"2022-12-31\"]\ndf = df[df[\"Date\"] &gt;= \"2011-01-01\"]\n\ncmap = load_cmap(\"ag_Sunset\", cmap_type=\"continuous\", reverse=True)\n\nfont_url = \"https://github.com/kosmynkab/Bona-Nova/blob/main/fonts/ttf\"\nfontlight = load_font(f\"{font_url}/BonaNova-Regular.ttf?raw=true\")\nfontmedium = load_font(f\"{font_url}/BonaNova-Bold.ttf?raw=true\")\n\nfont_url = \"https://github.com/coreyhu/Urbanist/blob/main/fonts/ttf\"\nfontyear = load_font(f\"{font_url}/Urbanist-Medium.ttf?raw=true\")\n\nstyle_args = dict(\n    cmap=cmap,\n    day_kws={\"alpha\": 0},\n    month_kws={\"font\": fontlight, \"size\": 6},\n    month_y_margin=0.8,\n    color_for_none=\"#eeeeee\",\n)\ntext_args = dict(\n    x=-4, y=3.5, size=15, rotation=90, color=\"#aaa\", va=\"center\", font=fontyear\n)\n\nyears = list(range(2011, 2023))[::-1]\nfig, axs = plt.subplots(nrows=len(years), figsize=(15, 10))\nfor i, year in enumerate(years):\n    dp.calendar(\n        df[\"Date\"],\n        df[\"n_tweets\"],\n        start_date=f\"{year}-01-01\",\n        end_date=f\"{year}-12-31\",\n        ax=axs[i],\n        **style_args,\n    )\n    axs[i].text(s=f\"{year}\", **text_args)\n\nfig.text(\n    x=0.39,\n    y=0.91,\n    s=\"Elon Musk Tweets\",\n    size=20,\n    font=fontmedium,\n)\nfig.text(\n    x=0.63,\n    y=0.1,\n    s=\"made with dayplot, by Joseph Barbier\",\n    size=7,\n    ha=\"right\",\n    font=fontmedium,\n)\n\nelon_ax = axs[0].inset_axes([0.7, 1.1, 0.3, 1.4])\nelon_ax.imshow(np.array(Image.open(\"docs/img/musk.png\")))\nelon_ax.axis(\"off\")\n</code></pre> <p></p>"},{"location":"tuto/advanced/#covid-19","title":"COVID-19","text":"<p>The dataset can be found here.</p> <pre><code>import matplotlib.pyplot as plt\nimport dayplot as dp\nimport pandas as pd\nfrom pyfonts import load_font\n\nfont_url = \"https://github.com/coreyhu/Urbanist/blob/main/fonts/ttf\"\nfontlight = load_font(f\"{font_url}/Urbanist-Light.ttf?raw=true\")\nfontmedium = load_font(f\"{font_url}/Urbanist-Medium.ttf?raw=true\")\n\ndf = pd.read_csv(\"datasets/country_vaccinations_by_manufacturer.csv\")\ndf_agg = (\n    df.groupby([\"date\", \"location\"], as_index=False)[\"total_vaccinations\"]\n    .sum()\n    .sort_values([\"location\", \"date\"])\n)\n\nfig, axs = plt.subplots(nrows=5, figsize=(12, 13))\nfig.subplots_adjust(hspace=0.5)\n\ntext_style = dict(size=16, ha=\"right\", x=0.99, y=1.15, color=\"#626262\", font=fontlight)\ncalend_style = dict(\n    cmap=\"Blues\",\n    start_date=\"2021-01-01\",\n    end_date=\"2021-12-31\",\n    week_starts_on=\"Monday\",\n    vmin=0,\n    vmax=1,\n    month_kws={\"font\": fontlight},\n    day_kws={\"font\": fontlight},\n)\n\nfrance = df_agg[df_agg[\"location\"] == \"France\"]\nfrance[\"total_vaccinations\"] = france[\"total_vaccinations\"] / (67.8 * 1e6)\ndp.calendar(\n    dates=france[\"date\"],\n    values=france[\"total_vaccinations\"],\n    ax=axs[1],\n    **calend_style,\n)\naxs[1].text(s=\"France\", transform=axs[1].transAxes, **text_style)\n\nsouth_korea = df_agg[df_agg[\"location\"] == \"South Korea\"]\nsouth_korea[\"total_vaccinations\"] = south_korea[\"total_vaccinations\"] / (51.8 * 1e6)\ndp.calendar(\n    dates=south_korea[\"date\"],\n    values=south_korea[\"total_vaccinations\"],\n    ax=axs[3],\n    **calend_style,\n)\naxs[3].text(s=\"South Korea\", transform=axs[3].transAxes, **text_style)\n\nus = df_agg[df_agg[\"location\"] == \"United States\"]\nus[\"total_vaccinations\"] = us[\"total_vaccinations\"] / (331.9 * 1e6)\ndp.calendar(\n    dates=us[\"date\"],\n    values=us[\"total_vaccinations\"],\n    ax=axs[0],\n    **calend_style,\n)\naxs[0].text(s=\"United States\", transform=axs[0].transAxes, **text_style)\n\nperu = df_agg[df_agg[\"location\"] == \"Peru\"]\nperu[\"total_vaccinations\"] = peru[\"total_vaccinations\"] / (33.2 * 1e6)\ndp.calendar(\n    dates=peru[\"date\"],\n    values=peru[\"total_vaccinations\"],\n    ax=axs[4],\n    **calend_style,\n)\naxs[4].text(s=\"Peru\", transform=axs[4].transAxes, **text_style)\n\nhk = df_agg[df_agg[\"location\"] == \"Hong Kong\"]\nhk[\"total_vaccinations\"] = hk[\"total_vaccinations\"] / (7.4 * 1e6)\ndp.calendar(\n    dates=hk[\"date\"],\n    values=hk[\"total_vaccinations\"],\n    ax=axs[2],\n    **calend_style,\n)\naxs[2].text(s=\"Hong Kong\", transform=axs[2].transAxes, **text_style)\n\ntitle_style = dict(\n    ha=\"center\",\n    va=\"top\",\n    font=fontmedium,\n    x=0.5,\n)\nfig.text(\n    y=0.97,\n    s=\"% of people vaccinated with COVID-19 in 2021\",\n    size=30,\n    **title_style,\n)\nfig.text(\n    y=0.93,\n    s=\"Percentages are relative to total population of the country\",\n    size=18,\n    color=\"#8d8d8d\",\n    **title_style,\n)\nfig.text(\n    x=0.88,\n    y=0.07,\n    s=\"Made with dayplot, by Joseph Barbier\",\n    font=fontmedium,\n    ha=\"right\",\n    size=14,\n)\n</code></pre> <p></p> <p></p>"},{"location":"tuto/basic-styling/","title":"Basic styling","text":""},{"location":"tuto/basic-styling/#change-colormap","title":"Change colormap","text":"<p>Use the <code>cmap</code> argument to use any other colormap from matplotlib. This argument can either be a string or a <code>matplotlib.colors.LinearSegmentedColormap</code> (the object behind colormaps in matplotlib).</p> <p>Pro tips: you can find great colormaps using pypalettes.</p> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\nfig, ax = plt.subplots(figsize=(15, 6))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    cmap=\"Reds\", # any matplotlib colormap\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    ax=ax,\n)\n</code></pre>"},{"location":"tuto/basic-styling/#change-other-colors","title":"Change other colors","text":"<p>You can change the color between squares with the <code>edgecolor</code> argument and the color for \"none\" (aka 0) with the <code>color_for_none</code> argument.</p> <p>Also, use <code>edgewidth</code> to moderate the width of the edge between squares.</p> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\nfig, ax = plt.subplots(figsize=(15, 6))\ndp.calendar(\n    df[\"dates\"],\n    df[\"values\"],\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    color_for_none=\"#bcbcbc\",\n    edgecolor=\"white\",\n    edgewidth=0.4,\n    cmap=\"OrRd\",\n    day_kws={\"color\": \"white\"},\n    month_kws={\"color\": \"white\"},\n    ax=ax,\n)\nfig.set_facecolor(\"#2a2929\")\nax.set_facecolor(\"#2a2929\")\n</code></pre> <p></p>"},{"location":"tuto/basic-styling/#text-styling","title":"Text styling","text":"<p>In order to customize the text (days and months), you have to, respectively, use the <code>day_kws</code> and <code>month_kws</code> arguments. All arguments passed to them will then be forwarded to <code>ax.text()</code>.</p> <p>Pro tip: when changing font size, the label positioning might get worse. In order to control that, use the <code>day_x_margin</code> argument (shift day labels to the left) and the <code>month_y_margin</code> argument (shift month labels to the top).</p> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\nfig, ax = plt.subplots(figsize=(15, 6))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    day_kws={\"weight\": \"bold\"},\n    month_kws={\"size\": 20, \"color\": \"red\"},\n    day_x_margin=0.03, # default = 0.02\n    month_y_margin=0.7, # default = 0.4\n    ax=ax,\n)\n</code></pre> <p></p>"},{"location":"tuto/boxstyle/","title":"Boxstyle","text":""},{"location":"tuto/boxstyle/#make-fancy-cells","title":"Make fancy cells","text":"<p>Under the hood, <code>dayplot</code> uses a niche matplotlib object called a <code>FancyBboxPatch</code>. It's pretty much a rectangle, but with much higher customization level.</p>"},{"location":"tuto/boxstyle/#boxstyle","title":"boxstyle","text":"<p>By default, you'll get simple squares, but you can leverage the <code>boxstyle</code> argument to do much fancier things.</p> circleroundsawtoothroundtoothround4 <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\nfig, ax = plt.subplots(figsize=(16, 4))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    boxstyle=\"circle\",\n    ax=ax,\n)\n</code></pre> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\nfig, ax = plt.subplots(figsize=(16, 4))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    boxstyle=\"round\",\n    ax=ax,\n)\n</code></pre> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\nfig, ax = plt.subplots(figsize=(16, 4))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    boxstyle=\"sawtooth\",\n    ax=ax,\n)\n</code></pre> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\nfig, ax = plt.subplots(figsize=(16, 4))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    boxstyle=\"roundtooth\",\n    ax=ax,\n)\n</code></pre> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\nfig, ax = plt.subplots(figsize=(16, 4))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    boxstyle=\"round4\",\n    ax=ax,\n)\n</code></pre> <p></p>"},{"location":"tuto/boxstyle/#other-arguments","title":"Other arguments","text":"<p>The <code>dp.calendar()</code> function will take all additional arguments and pass them to each <code>FancyBboxPatch</code>.</p> <p>This means that any argument that this class accepts will be accepted. Here is a non-exhaustive list.</p> mutation_scale (size scale)hatchalphalinestyle <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\nfig, ax = plt.subplots(figsize=(16, 4))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    mutation_scale=0.8, # 80% of original size\n    ax=ax,\n)\n</code></pre> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\nfig, ax = plt.subplots(figsize=(16, 4))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    hatch=\"*\",\n    ax=ax,\n)\n</code></pre> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\nfig, ax = plt.subplots(figsize=(16, 4))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    alpha=0.5,\n    ax=ax,\n)\n</code></pre> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\nfig, ax = plt.subplots(figsize=(16, 4))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    linestyle=\"--\",\n    edgewidth=1,\n    ax=ax,\n)\n</code></pre> <p></p>"},{"location":"tuto/built-in-styles/","title":"Built in styles","text":"<p><code>dayplot</code> ships a few built-in styles so that you can style your heatmap super quickly.</p> <p>Currently, there is only the \"Github\" style. But I'm planning to add more, and if you have suggestions it's more than welcome! You can just open an issue</p>"},{"location":"tuto/built-in-styles/#use-pre-defined-styles","title":"Use pre-defined styles","text":"Github <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\nstyle = dp.styles[\"github\"]\n\nfig, ax = plt.subplots(figsize=(15, 6))\ndp.calendar(\n   dates=df[\"dates\"],\n   values=df[\"values\"],\n   start_date=\"2024-01-01\",\n   end_date=\"2024-12-31\",\n   ax=ax,\n   **style,\n)\nfig.set_facecolor(\"#0d1117\")\nax.set_facecolor(\"#0d1117\")\n</code></pre>"},{"location":"tuto/combine-charts/","title":"Combine charts","text":"<p>Since <code>dayplot</code> draws the chart on a matplotlib axes, it's quite easy to combine them.</p> <p>For this, we need to create a figure with 2 axes (<code>nrows=2</code> since we want them to be one above the other). Then we plot the year 2024 below and the year 2025 above.</p> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\nfig, (ax1, ax2) = plt.subplots(nrows=2, figsize=(16, 4))\n\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    start_date=\"2025-01-01\",\n    end_date=\"2025-12-31\",\n    cmap=\"Blues\",\n    ax=ax1, # top axes\n)\n\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    cmap=\"Blues\",\n    ax=ax2, # bottom axes\n)\n</code></pre> <p></p>"},{"location":"tuto/combine-charts/#year-label","title":"Year label","text":"<p>It makes sense to add the year associated with each chart, so let's leverage <code>ax.text()</code> to add the years next to each chart.</p> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\nfig, (ax1, ax2) = plt.subplots(nrows=2, figsize=(16, 4))\n\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    start_date=\"2025-01-01\",\n    end_date=\"2025-12-31\",\n    cmap=\"inferno\",\n    ax=ax1, # top axes\n)\n\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    cmap=\"inferno\",\n    ax=ax2, # bottom axes\n)\n\ntext_args = dict(x=-4, y=3.5, size=30, rotation=90, color=\"#aaa\", va=\"center\")\nax1.text(s=\"2024\", **text_args)\nax2.text(s=\"2025\", **text_args)\n</code></pre>"},{"location":"tuto/fetch-github-contribs/","title":"Fetch and plot github contributions","text":"<p><code>dayplot</code> also provides a <code>fetch_github_contrib()</code> function, to automatically get contribution data from a given user.</p> <p>To use this function, you need a valid Github token with the <code>read:user</code> admin right. You can create such a token here.</p> <p>Since we don't want to share this token with other people, here I load my Github token using the <code>dotenv</code> package. It's advised to do so, but not mandatory for the code to work.</p>"},{"location":"tuto/fetch-github-contribs/#fetch-the-data","title":"Fetch the data","text":"<p>The <code>fetch_github_contrib()</code> function requires you to pass:</p> <ul> <li>a Github username</li> <li>your Github token</li> <li>start and end dates to fetch the data using ISO 8601 format (e.g. <code>\"2024-01-01T00:00:00Z\"</code>)</li> </ul> <p>Note: you'll need both <code>pandas</code> and <code>requests</code> to be installed</p> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom dotenv import load_dotenv\nimport os\n\nimport dayplot as dp\nfrom dayplot.github import fetch_github_contrib\n\nload_dotenv()\ntoken = os.getenv(\"GITHUB_TOKEN\")\n\n# requires both pandas and requests to be installed\nmy_data = fetch_github_contrib(\n    username=\"JosephBARBIERDARNAL\", # this is my Github username\n    github_token=token,\n    start_date=\"2024-01-01T00:00:00Z\",\n    end_date=\"2024-12-31T23:59:59Z\",\n)\n</code></pre> <p>Here, <code>my_data</code> is a pandas dataframe with 2 columns: <code>\"dates\"</code> and <code>\"values\"</code>.</p>"},{"location":"tuto/fetch-github-contribs/#plot-the-data","title":"Plot the data","text":"<p>Once I've fetched this data, I can plot my contribution chart:</p> <pre><code># mkdocs: render\nfig, ax = plt.subplots(figsize=(15, 6))\ndp.calendar(\n    dates=my_data[\"dates\"],\n    values=my_data[\"values\"],\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    ax=ax,\n)\n</code></pre>"},{"location":"tuto/legend/","title":"Legend","text":""},{"location":"tuto/legend/#add-the-default-legend","title":"Add the default legend","text":"<p>You can add a very simple legend by using <code>legend=True</code>:</p> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\nfig, ax = plt.subplots(figsize=(16, 4))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    legend=True,\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    ax=ax,\n)\n</code></pre>"},{"location":"tuto/legend/#control-the-number-of-bins-in-legend","title":"Control the number of bins in legend","text":"<p>By default, it draws 4 bins, but it can be any positive number you want thanks to <code>legend_bins</code>:</p> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\nfig, ax = plt.subplots(figsize=(16, 4))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    legend=True,\n    legend_bins=8,             # 8 bins\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    ax=ax,\n)\n</code></pre>"},{"location":"tuto/legend/#add-labels-of-the-values","title":"Add labels of the values","text":"<p>To add labels below the legend, you can either use the \"auto\" option, or use your own list.</p> <code>legend_labels=\"auto\"</code><code>legend_labels=[\"a\", \"b\", \"c\", \"d\"]</code><code>legend_labels_precision=1</code> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\nfig, ax = plt.subplots(figsize=(16, 4))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    legend=True,\n    legend_labels=\"auto\",      # calculate the value for each color\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    ax=ax,\n)\n</code></pre> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\nfig, ax = plt.subplots(figsize=(16, 4))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    legend=True,\n    legend_labels=[\"a\", \"b\", \"c\", \"d\"],\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    ax=ax,\n)\n</code></pre> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\nfig, ax = plt.subplots(figsize=(16, 4))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    legend=True,\n    legend_labels=\"auto\",\n    legend_labels_precision=1,  # accuracy when rounding\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    ax=ax,\n)\n</code></pre>"},{"location":"tuto/legend/#advanced-customization","title":"Advanced customization","text":"<p>You can use the <code>legend_labels_kws</code> argument to control exactly how the labels are supposed to look like:</p> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\nfig, ax = plt.subplots(figsize=(16, 4))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    legend=True,\n    legend_labels=\"auto\",\n    legend_labels_kws=dict(color=\"red\", size=10, weight=\"bold\"),\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    ax=ax,\n)\n</code></pre>"},{"location":"tuto/legend/#negative-values","title":"Negative values","text":"<p>It works well with negative values too:</p> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\n# add negative values at some random dates\ndf.loc[df.sample(n=40, replace=False).index, \"values\"] *= -1\n\nfig, ax = plt.subplots(figsize=(15, 5))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    cmap=\"RdBu\",\n    legend=True,\n    legend_bins=5,\n    legend_labels=\"auto\",\n    ax=ax,\n)\n</code></pre> <p></p>"},{"location":"tuto/negative-values/","title":"Negative values","text":""},{"location":"tuto/negative-values/#handling-negative-values","title":"Handling negative values","text":"<p><code>dayplot</code> makes it straightforward to plot negative values.</p> <p>Under the hood, it automatically checks for them. If no negative values are found, all days with 0 or missing data are displayed in light gray (using the <code>color_for_none</code> argument). In this case, it's recommended to use a sequential colormap.</p> <p>Otherwise, <code>color_for_none</code> is ignored and all cells are colored according to their values. Any missing data is treated as 0 by default, so if you need a different approach, fill in the data before plotting.</p> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\n# add negative values at some random dates\ndf.loc[df.sample(n=40, replace=False).index, \"values\"] *= -1\n\nfig, ax = plt.subplots(figsize=(16, 4))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    cmap=\"RdBu\", # use a diverging colormap (red -&gt; white -&gt; blue)\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    ax=ax,\n)\n</code></pre> <p>Red days are the ones with negative values.</p> <p></p>"},{"location":"tuto/negative-values/#control-colormap-scaling","title":"Control colormap scaling","text":"<p>You can set custom boundaries for the colormap using the <code>vmin</code>, <code>vcenter</code> and <code>vmax</code> arguments. In this example, any cell with a value at or below -3 displays in the deepest red hue, 0 is shown in a neutral color (white), and any cell at or above 10 appears in the most intense blue.</p> <p>This can be used as a convenient way of controlling color mapping when there are outliers.</p> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport dayplot as dp\nfrom dayplot import load_dataset\n\ndf = load_dataset()\n\n# add negative values at some random dates\ndf.loc[df.sample(n=40, replace=False).index, \"values\"] *= -1\n\nfig, ax = plt.subplots(figsize=(16, 4))\ndp.calendar(\n    dates=df[\"dates\"],\n    values=df[\"values\"],\n    cmap=\"RdBu\", # use a diverging colormap (red -&gt; white -&gt; blue)\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    vmin=-3,\n    vcenter=0,\n    vmax=10,\n    ax=ax,\n)\n</code></pre> <p></p>"}]}